ğŸ”°Episode-2

    ğŸ”†Part-1
      ğŸ’«What is npm ? 
        ans :- Npm is a Packeg Maneger. Basically it's manages all the Packeges. npm is a command line that allows the developers to install the packages.

     ğŸ’«What is Packeg.json ?
       ans :- Packeg.json is a Configuration for Npm.

     ğŸ’«What is Dependences ? 
        ans :- A app runs on Lots of Packeges that Packeges are Called Dependences.

     ğŸ’«What is Bundler ? 
       ans :- A Bundler is a tool that takes all the javascript code, along with any other assets like CSS or Images and Combine the Large file into a single file which can serve to the Browser. There are some Popular Bundlers are :- Webpack , parcel, vite, Roll up etc.

     ğŸ’«Why we use Bundler ? 
      ans :- The purpose of using Bundler is to organize module and dependencies, Optimise website Performance, and reducet the file size.
     
     ğŸ’«What is the Difference between dependencies and devDependencies ?
      ans :-
     
     ğŸ’«What is the package-Lock.json ? 
      ans :- The package-Lock.json file is a lock File that tracks the exact version numbers of the dependencies and the packages for the curent projcet.

     ğŸ’«What if we delete Packeg-lock.json file ?
      ans :- If we Delete Packeg-lock.json file then, npm will go through the requirements and install the package version again.

     ğŸ’«What is node_modules ?
      ans :- node_modules is like a Database, the node_modules directory contain all the data of dependencies and the packages to build and run the projcet.

     ğŸ’«What is transsitive dependencies?
      ans :- Like a Examples, Our projcet need dependencies like parcel and parcel as a projcet has their own Dependences and those dependencies can have their own dependencies and this is known as a transsitive dependency.

     ğŸ’«- What is `.gitignore`? What should we add and not add into it?
      ans :- .gitignore is file where we basically declare what not to push to the repository.
      we should add /node_modules into .gitignore



     ğŸ’« "parcel": "^2.10.3" or "parcel": "`~`2.10.3" Here what is the  (^)Caret and (~)tilde before the version?
     ans :- (^)Caret - Means If there is Minor Update, then the version will do Automatically, and the 
     (~)tilde - Means If there is Major Update, then the version will do Automatically. 

    ğŸ”†Part-2

     ğŸ’«What is the Difference between npm and npx?


     ğŸ’«What is .parcel-cache ?
      ans :- .cache folder stored the information about our projcet when parcel builds it, so that it doesn't have to re-analyze everyhthing form scratch. It's a key reson why parcel can be so fast in Development mode.
      
     ğŸ’« List down some superpowers of Parcel.
        -Dev build
        -Local Server
        -HMR = Hot Module Replacement
        -File Watching Algorithm -> Written in C++
        -Caching -> Faster builds
        -Image Optimiazation
        -Minification
        -Bundling
        -Compress
        -Consistent Hashing
        -Code Spliting
        -Differential Bundling -> Support Older Browser
        -Diagonostic
        -Error Handling
        -HTTPS
        -Tree Shaking -> Remove unused Code
        -Different dev and production Bundleing.

     ğŸ’«What is Tree Shaking?
      ans :- In Production build, Parcel statically analyzes improt and export of each module, and removes everyhthing that isn't used, This is Called "Tree Shaking" or "dead Code Elimination" 

     ğŸ’«What is Scope Hoisting?
      ans :- Parcel also Concatinates the modules into a single scope when it is Possible, rather then wrapping each module into a separate function. This is called "Scope Hoisting". This improves the Minification, more Effective and also improves runtime Performance.

     ğŸ’« What is Hot Module Replacement?
      ans :- As we make Change to our Code, Parcel Automatically rebuilds the Change files and Updates our app into  the Browser, By default Parcel fully refresh the page, but Some Cases it Perform HMR(Hot Module Replacement) , HMR  improves the Development Experience by Updating Module in the Browser at runtime without needing whole Page refresh. That means the Application State Can be retain as we change some small things in our Code. 


     ğŸ’« What is the `dist` folder?
      ans :- Parcel set the Location Where compiled bundles files will be stored, by default is 'dist' folder.

     ğŸ’«What is `browserlists`?
       ans :- When we are adding browserlists in Our Project that means, in which version of Browser our app will run.
        ğŸ”·Example :- In Package.json ->
         "browserlist" : {
          "last 2 versions" -->That Means my app Can Support at last 2 Older version Also.
        }

     ğŸ’«What is the code for Development version of parcel?
      -Code : npx parcel index.html

     ğŸ’«What is the code for Production version of parcel?
      -Code : npx parcel build index.html
        ğŸ”·Note :- We have to Remove the main File (default : App.js) from the Packeg.json Before Compiliing Production version.







ğŸ”†
ğŸ”°
âšœ
ğŸ’«
ğŸ”·